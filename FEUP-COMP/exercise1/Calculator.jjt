options
{
    LOOKAHEAD=2;
}

PARSER_BEGIN(Calculator)

public class Calculator {
    public static void main(String[] args) throws ParseException {
        System.out.println("Write an arithmetic expression");
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression();

        // root.dump("");

        System.out.println("Expression value: " + myCalc.eval(root));
    }

    // This is to evaluate the expression.
    int eval(SimpleNode node) {
        if (node.jjtGetNumChildren() == 0)
            return node.val;
        else if (node.jjtGetNumChildren() == 1)
            return this.eval((SimpleNode) node.jjtGetChild(0));

        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0);
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1);

        switch(node.id) {
            case CalculatorTreeConstants.JJTADD : return eval(lhs) + eval(rhs);
            case CalculatorTreeConstants.JJTSUB : return eval(lhs) - eval(rhs);
            case CalculatorTreeConstants.JJTMUL : return eval(lhs) * eval(rhs);
            case CalculatorTreeConstants.JJTDIV : return eval(lhs) / eval(rhs);
            default:
                System.out.println("Illegal Operator!");
                System.exit(1);
        }

        return 0;
    }
}

PARSER_END(Calculator)

SKIP :
{
    " " | "\t" | "\r"
}

TOKEN :
{
    < INTEGER : (["0" - "9"])+ >
    | < LF : "\n" >
    | < SYMBOL : ["A"-"Z", "a"-"z"](["0"-"9", "A"-"Z", "a"-"z"])* >
    | < SEMICOL: ";" >
}

SimpleNode Expression(): {Token sym, value; }
{
    ( sym =<SYMBOL> "=" value=<INTEGER>{
        SymbolTable.store(sym.image, Integer.parseInt(value.image));
    } <SEMICOL> <LF>)*
    Expr1() <SEMICOL> <LF> { return jjtThis; }
}

void Expr1() #void: {}
{
    Expr2(1)
    [
        ( "+" Expr2(1) #Add(2)
        | "-" Expr2(1) #Sub(2))
    ]
}

void Expr2(int sign) #void: {}
{
    Expr3(sign)
    [
        ( "*" Expr3(1) #Mul(2)
        | "/" Expr3(1) #Div(2))
    ]
}

void Expr3(int sign) #void: {Token t;}
{
    ( t = <INTEGER> {
        jjtThis.val = sign * Integer.parseInt(t.image);
    }
    | t = <SYMBOL> {
        jjtThis.val = sign * SymbolTable.get_value(t.image);
    }) #Term
    | "-" Expr3(-1)
    | "(" Expr1() ")"
}